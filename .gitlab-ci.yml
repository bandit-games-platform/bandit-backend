default:
  interruptible: true
  image: eclipse-temurin:21-jdk-alpine

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
  - deploy
  - destroy


# ----------------------- BUILD ---------------------------------- #

build_chatbot:
  stage: build
  script:
    - echo "Building chatbot project"
    - chmod +x gradlew
    - cd ./chatbot
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'


build_gameplay:
  stage: build
  script:
    - echo "Building gameplay project"
    - chmod +x gradlew
    - cd ./gameplay
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'


build_game_registry:
  stage: build
  script:
    - echo "Building game registry project"
    - chmod +x gradlew
    - cd ./gameRegistry
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'


build_player:
  stage: build
  script:
    - echo "Building player project"
    - chmod +x gradlew
    - cd ./player
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'


build_statistics:
  stage: build
  script:
    - echo "Building statistics project"
    - chmod +x gradlew
    - cd ./statistics
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'


build_storefront:
  stage: build
  script:
    - echo "Building storefront project"
    - chmod +x gradlew
    - cd ./storefront
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'ci-cd'

# ----------------------- TEST ---------------------------------- #

test_chatbot:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running chatbot tests"
    - chmod +x gradlew
    - cd ./chatbot
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "chatbot/build/test-results/test/**/TEST-*.xml"


test_gameplay:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running gameplay tests"
    - chmod +x gradlew
    - cd ./gameplay
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "gameplay/build/test-results/test/**/TEST-*.xml"


test_game_registry:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running game registry tests"
    - chmod +x gradlew
    - cd ./gameRegistry
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "gameRegistry/build/test-results/test/**/TEST-*.xml"


test_player:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running player tests"
    - chmod +x gradlew
    - cd ./player
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "player/build/test-results/test/**/TEST-*.xml"


test_statistics:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running statistics tests"
    - chmod +x gradlew
    - cd ./statistics
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "statistics/build/test-results/test/**/TEST-*.xml"


test_storefront:
  stage: test
  needs: []
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:27.3.1-dind

  before_script:
    - apk add --no-cache docker

  script:
    - echo "Running storefront tests"
    - chmod +x gradlew
    - cd ./storefront
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: "storefront/build/test-results/test/**/TEST-*.xml"


# ----------------------- SAST ---------------------------------- #

sast:
  stage: test
  needs: []
  variables:
    SAST_EXCLUDED_PATHS: src/test
    SEARCH_MAX_DEPTH: '10'
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

semgrep-sast:
  rules:
    - if: $SAST_DISABLED == 'true' || $SAST_DISABLED == '1'
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /semgrep/
      when: never
    - if: $CI_COMMIT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - '**/*.java'

# ---------------------- DEPLOY --------------------------------- #

# ----------------- DEV ----------------- #
# ---------- DATABASE, VNET and CONTAINER REGISTRY -------- #
deploy_postgres_and_vnet_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  before_script:
    - tdnf install -y postgresql
    - psql --version
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
  script:
    - declare -A value_map=(
      ["VNET_NAME"]="banditDevVnet"
      ["SUBNET_NAME"]="devSubnet"
      ["SUBNET_DB_NAME"]="devDbSubnet"
      ["DB_SERVER_NAME"]="banditdevpostgres"
      ["ENV_NAME"]="env-dev-containers"
      ["RG_NAME"]="rg_bandit_games_dev"
      ["PG_ADMIN_USER"]=$DEV_PG_ADMIN_USR
      ["PG_ADMIN_PASSWORD"]=$DEV_PG_ADMIN_PWD
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-database-vnet.sh
    - cicd/deploy-database-vnet.sh "$serialized_map"
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'

# -------- MICROSERVICES --------- #
deploy_chatbot_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_chatbot
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["PG_USER"]=$DEV_PG_USER
      ["PG_PASSWORD"]=$DEV_PG_PWD
      ["PG_DB_NAME"]="banditdevpostgres"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["CONTAINER_NAME"]="chatbot-dev-container"
      ["ENVIRONMENT"]="env-dev-containers"
      ["IMAGE_NAME"]="chatbot-context"
      ["PORT"]=8091
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: chatbot-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_chatbot_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_gameplay_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_gameplay
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["PG_USER"]=$DEV_PG_USER
      ["PG_PASSWORD"]=$DEV_PG_PWD
      ["PG_DB_NAME"]="banditdevpostgres"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["CONTAINER_NAME"]="gameplay-dev-container"
      ["ENVIRONMENT"]="env-dev-containers"
      ["IMAGE_NAME"]="gameplay-context"
      ["PORT"]=8093
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: gameplay-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_gameplay_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_game_registry_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_game_registry
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["PG_USER"]=$DEV_PG_USER
      ["PG_PASSWORD"]=$DEV_PG_PWD
      ["PG_DB_NAME"]="banditdevpostgres"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["CONTAINER_NAME"]="game-registry-dev-container"
      ["ENVIRONMENT"]="env-dev-containers"
      ["IMAGE_NAME"]="game-registry-context"
      ["PORT"]=8092
      ["KEYCLOAK_CLIENT_SECRET"]=$KEYCLOAK_BACKEND_SECRET
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: game-registry-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_game_registry_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_player_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_player
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["PG_USER"]=$DEV_PG_USER
      ["PG_PASSWORD"]=$DEV_PG_PWD
      ["PG_DB_NAME"]="banditdevpostgres"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["CONTAINER_NAME"]="player-dev-container"
      ["ENVIRONMENT"]="env-dev-containers"
      ["IMAGE_NAME"]="player-context"
      ["PORT"]=8094
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: player-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_player_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_statistics_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_statistics
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
          ["PG_USER"]=$DEV_PG_USER 
          ["PG_PASSWORD"]=$DEV_PG_PWD 
          ["PG_DB_NAME"]="banditdevpostgres" 
          ["RESOURCE_GROUP"]="rg_bandit_games_dev" 
          ["CONTAINER_NAME"]="statistics-dev-container" 
          ["ENVIRONMENT"]="env-dev-containers"
          ["IMAGE_NAME"]="statistics-context"
          ["PORT"]=8095
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: statistics-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_statistics_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_storefront_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_storefront
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["PG_USER"]=$DEV_PG_USER
      ["PG_PASSWORD"]=$DEV_PG_PWD
      ["PG_DB_NAME"]="banditdevpostgres"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["CONTAINER_NAME"]="storefront-dev-container"
      ["ENVIRONMENT"]="env-dev-containers"
      ["IMAGE_NAME"]="storefront-context"
      ["PORT"]=8096
      ["STRIPE_API_KEY"]=$STRIPE_TEST_API_KEY
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-context-container.sh
    - cicd/deploy-context-container.sh "$serialized_map"
  environment:
    name: storefront-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_storefront_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'

# ----------------- PROD ---------------- #

#deploy_statistics_prod:
#  stage: deploy
#  when: manual
#  needs:
#    - build_statistics
#  script:
#    -
#  # This will only be available if you perform a tag, or you commit to main
#  rules:
#    - if: $CI_COMMIT_TAG
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


# ---------------------- DESTROY -------------------------------- #
# ----------------- DEV ----------------- #

destroy_chatbot_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="chatbot-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: chatbot-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_gameplay_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="gameplay-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: gameplay-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_game_registry_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="game-registry-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: game-registry-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_player_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="player-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: player-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_statistics_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="statistics-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: statistics-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_storefront_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="storefront-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: storefront-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'

# ----------------- PROD ---------------- #

