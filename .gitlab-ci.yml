default:
  interruptible: true
  image: eclipse-temurin:21-jdk-alpine

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
  - deploy
  - destroy


# -- reusable configurations --

# build

.build-job-template-dev: &build-job-template-dev
  script:
    - echo "Building $CONTEXT_NAME project"
    - chmod +x gradlew
    - cd ./$CONTEXT_NAME
    - ../gradlew clean bootBuildImage --stacktrace
    - cd ..
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'

.build-job-template-prod: &build-job-template-prod
  script:
    - echo "Building $CONTEXT_NAME project"
    - chmod +x gradlew
    - cd ./$CONTEXT_NAME
    - ../gradlew clean bootBuildImageProd --stacktrace
    - cd ..
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# test

.test-job-template: &test_job_template
  needs: []
  script:
    - echo "Running $CONTEXT_NAME tests"
    - chmod +x gradlew
    - cd ./$CONTEXT_NAME
    - ../gradlew test
    - cd ..
  artifacts:
    when: always
    reports:
      junit: "$CONTEXT_NAME/build/test-results/test/**/TEST-*.xml"


# ----------------------- BUILD ----------------------- #

# DEV

build_chatbot_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: chatbot
  services:
    - docker:dind

build_gameplay_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameplay
  services:
    - docker:dind

build_game_registry_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameRegistry
  services:
    - docker:dind

build_player_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: player
  services:
    - docker:dind

build_statistics_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: statistics
  services:
    - docker:27.3-dind

build_storefront_dev:
  <<: *build-job-template-dev
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: storefront
  services:
    - docker:dind

# PROD

build_chatbot_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: chatbot
  services:
    - docker:dind

build_gameplay_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameplay
  services:
    - docker:dind

build_game_registry_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameRegistry
  services:
    - docker:dind

build_player_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: player
  services:
    - docker:dind

build_statistics_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: statistics
  services:
    - docker:27.3-dind

build_storefront_prod:
  <<: *build-job-template-prod
  stage: build
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: storefront
  services:
    - docker:dind


# ----------------------- TEST ----------------------- #

test_chatbot:
  <<: *test_job_template
  stage: test
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: chatbot
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker

test_gameplay:
  <<: *test_job_template
  stage: test
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameplay
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker

test_game_registry:
  <<: *test_job_template
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: gameRegistry
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker

test_player:
  <<: *test_job_template
  stage: test
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: player
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker

test_statistics:
  <<: *test_job_template
  stage: test
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: statistics
  services:
    - docker:27.3-dind
  before_script:
    - apk add --no-cache docker

test_storefront:
  <<: *test_job_template
  stage: test
  variables:
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: ""
    CONTEXT_NAME: storefront
  services:
    - docker:dind
  before_script:
    - apk add --no-cache docker

# ----------------------- SAST ----------------------- #

sast:
  stage: test
  needs: []
  variables:
    SAST_EXCLUDED_PATHS: src/test
    SEARCH_MAX_DEPTH: '10'
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml

semgrep-sast:
  rules:
    - if: $SAST_DISABLED == 'true' || $SAST_DISABLED == '1'
      when: never
    - if: $SAST_EXCLUDED_ANALYZERS =~ /semgrep/
      when: never
    - if: $CI_COMMIT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"
      exists:
        - '**/*.java'

# ----------------------- DEPLOY ----------------------- #

# DEV

deploy_postgres_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    # In here add all other build stages when setup
    - build_statistics
  before_script:
    - tdnf install -y postgresql
    - psql --version
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
  script:
    - chmod +x cicd/deploy-database-vnet.sh
    - cicd/deploy-database-vnet.sh
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_statistics_dev:
  image: mcr.microsoft.com/azure-cli
  stage: deploy
  when: on_success
  needs:
    - deploy_postgres_dev
    - build_statistics
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - tag=$CI_COMMIT_REF_NAME
    - chmod +x cicd/deploy-statistics-dev.sh
    - cicd/deploy-statistics-dev.sh
  environment:
    name: statistics-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_statistics_dev
  # This will only run when you commit to a merge request or to the ci-cd branch
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


deploy_rabbitmq_dev:
  stage: deploy
  needs: []
  image: mcr.microsoft.com/azure-cli
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az account set --subscription $SUBS_ID_DEV
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["ENV_NAME"]="env-dev-containers"
      ["RESOURCE_GROUP"]="rg_bandit_games_dev"
      ["ACR_NAME"]=$REGISTRY_USERNAME
      ["CONTAINER_NAME"]="rabbitmq-dev-container"
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-rabbitmq.sh
    - cicd/deploy-rabbitmq-prod.sh "$serialized_map"
  environment:
    name: rabbitmq-dev
    deployment_tier: testing
    action: start
    auto_stop_in: 1 hours
    on_stop: destroy_rabbitmq_dev
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


# ----------------- PROD ---------------- #

deploy_rabbitmq_prod:
  stage: deploy
  needs: []
  image: mcr.microsoft.com/azure-cli
  before_script:
    - az login --service-principal -u $PROD_AZURE_APP_ID -p $PROD_AZURE_PASSWORD --tenant $PROD_AZURE_TENANT
    - az account set --subscription $SUBS_ID_PROD
    - az extension add --name containerapp --upgrade
  script:
    - declare -A value_map=(
      ["ENV_NAME"]="env-prod-containers"
      ["RESOURCE_GROUP"]="rg_bandit_games_prod"
      ["ACR_NAME"]=$PROD_REGISTRY_USERNAME
      ["CONTAINER_NAME"]="rabbitmq-prod-container"
      )
    - serialized_map=""
    - for key in "${!value_map[@]}"; do serialized_map+="$key=${value_map[$key]} "; done
    - chmod +x cicd/deploy-rabbitmq.sh
    - cicd/deploy-rabbitmq-prod.sh "$serialized_map"
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == 'prod'


# ----------------------- DESTROY ----------------------- #

# DEV

destroy_statistics_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="statistics-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: statistics-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'


destroy_rabbitmq_dev:
  image: mcr.microsoft.com/azure-cli
  stage: destroy
  when: manual
  before_script:
    - az login --service-principal -u $DEV_AZURE_APP_ID -p $DEV_AZURE_PASSWORD --tenant $DEV_AZURE_TENANT
    - az extension add --name containerapp --upgrade
  script:
    - CONTAINER_NAME="rabbitmq-dev-container"
    - RESOURCE_GROUP="rg_bandit_games_dev"
    - echo "Deleting container app"
    - az containerapp delete --name $CONTAINER_NAME --resource-group $RESOURCE_GROUP --yes
  environment:
    name: rabbitmq-dev
    action: stop
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'ci-cd'
