default:
  interruptible: true
  image: eclipse-temurin:21-jdk-alpine

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH'
    - if: $CI_COMMIT_TAG

stages:
  - build
  - test
#  - deploy
#  - destroy

build_statistics:
  stage: build
  script:
    - echo "Building statistics project"
    - chmod +x gradlew
    - cd ./statistics
    - ../gradlew bootJar
    - cd ..
  artifacts:
    name: "build-statistics-artifact"
    when: on_success
    expire_in: 2 days
    paths:
      - "statistics/build/libs/*.jar"

test_statistics:
  stage: test
  needs: []
  variables:
    POSTGRES_DB: $TEST_PG_DB
    POSTGRES_USER: $TEST_PG_USER
    POSTGRES_PASSWORD: $TEST_PG_PASS
    POSTGRES_ROOT_PASSWORD: $TEST_PG_RPASS
    DATASOURCE_URL: "jdbc:postgresql://localhost:5432/bandit_db"
    DATASOURCE_USER: $TEST_PG_USER
    DATASOURCE_PASS: $TEST_PG_PASS
  # Do we need keycloak? Rabbit? for the tests
  services:
    # How do we specify an init script like we do with volumes in docker-compose.yml?
    # How do we specify a network and port to use?
    - name: postgres:16.1-alpine
      alias: postgres_main_db
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          until [ -f "$CI_PROJECT_DIR/.git/index" ]; do sleep 1; done;
          until [ -f "$CI_PROJECT_DIR/.git/index.lock" ]; do sleep 1; done;
          cp -R "$CI_PROJECT_DIR/infrastructure/init.sql" /docker-entrypoint-initdb.d/db.sql
          exec /usr/local/bin/docker-entrypoint.sh "$@"
        - '/bin/bash'
      command: ["postgres"]

  script:
    - echo "Running statistics tests"
    - chmod +x gradlew
    - cd ./statistics
    - ../gradlew test
    - cd ..

  artifacts:
    when: always
    reports:
      junit: statistics/build/test-results/test/**/TEST-*.xml
